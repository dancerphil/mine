{"version":3,"sources":["Theme2.module.css","Block.module.css","App.module.css","useWindowWidth.ts","renderer.ts","region.ts","Block.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getWindowWidth","window","outerWidth","useWindowWidth","useState","windowWidth","setWindowWidth","useEffect","updateWindowWidth","addEventListener","removeEventListener","listeners","rerender","forEach","listener","subscribe","push","splice","indexOf","createRenderer","blockMap","start","getXY","i","Math","floor","getId","x","y","getSurroundingBlocks","block","blockIndexList","compact","map","id","createBlock","mine","reveal","mark","label","fillMap","Object","values","mineCount","random","blocks","sumBy","resetMap","handleMark","handleReveal","console","error","handleBlockClick","c","handleValidFillMap","filter","b","handleSmart","Block","style","handleClick","useCallback","className","cx","styles","theme","cover","onClick","containerStyleSelector","createSelector","width","sizeStyleSelector","size","height","increase","v","App","useReducer","containerStyle","blockStyle","container","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0302012c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Theme2_cover__3865b\",\"reveal\":\"Theme2_reveal__1EBmM\",\"mine\":\"Theme2_mine__3IuD1\",\"mark\":\"Theme2_mark__3Tzcm\",\"label0\":\"Theme2_label0__3RWIe\",\"label1\":\"Theme2_label1__2ZQ5E\",\"label2\":\"Theme2_label2__3qBuF\",\"label3\":\"Theme2_label3__2CRCO\",\"label4\":\"Theme2_label4__3JfsB\",\"label5\":\"Theme2_label5__10eKI\",\"label6\":\"Theme2_label6__1_WrO\",\"label7\":\"Theme2_label7__2QVoS\",\"label8\":\"Theme2_label8__3yYkG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__iCjDP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import {useState, useEffect} from 'react';\n\nconst getWindowWidth = () => {\n    return window.outerWidth;\n}\n\nconst useWindowWidth = () => {\n    const [windowWidth, setWindowWidth] = useState<number>(getWindowWidth);\n    useEffect(\n        () => {\n            const updateWindowWidth = () => setWindowWidth(getWindowWidth());\n            window.addEventListener('resize', updateWindowWidth);\n            return () => window.removeEventListener('resize', updateWindowWidth);\n        }\n    );\n    return windowWidth;\n}\n\nexport default useWindowWidth;\n","type Listener = () => void;\n\nconst createRenderer = () => {\n    const listeners: Listener[] = [];\n    const rerender = () => {\n        listeners.forEach(listener => listener());\n    }\n    const subscribe = (listener: Listener) => {\n        listeners.push(listener);\n        return () => {\n            listeners.splice(listeners.indexOf(listener), 1);\n        }\n    }\n    return {rerender, subscribe};\n}\n\nexport const {rerender, subscribe} = createRenderer()\n","import {sumBy, compact} from 'lodash';\nimport {rerender} from './renderer';\nimport {Block} from './types';\n\ninterface BlockMap {\n    [key: string]: Block\n}\n\nexport const blockMap: BlockMap = {};\n\nlet start = false;\n\nconst getXY = (i: number) => {\n    return [i % 10, Math.floor(i / 10)]\n}\n\nconst getId = (x: number, y: number) => {\n    return `${x},${y}`;\n}\n\nconst getSurroundingBlocks = (block: Block) => {\n    const {x, y} = block;\n    const blockIndexList = [\n        getId(x - 1, y - 1), getId(x - 1, y), getId(x - 1, y + 1),\n        getId(x, y - 1), getId(x, y + 1),\n        getId(x + 1, y - 1), getId(x + 1, y), getId(x + 1, y + 1),\n    ]\n    return compact(blockIndexList.map(id => blockMap[id]));\n}\n\nconst createBlock = (i: number) => {\n    const [x, y] = getXY(i);\n    const id = getId(x, y);\n    return {\n        id,\n        x,\n        y,\n        mine: false,\n        reveal: false,\n        mark: false,\n        label: 0,\n    }\n}\n\nconst fillMap = () => {\n    Object.values(blockMap).forEach((block) => {\n        block.mine = false\n    })\n\n    let mineCount = 0;\n    while (mineCount < 150) {\n        const i = Math.floor(Math.random() * 1000)\n        const [x, y] = getXY(i)\n        const id = getId(x, y)\n        const block = blockMap[id]\n        if (!block.mine) {\n            block.mine = true;\n            mineCount ++;\n        }\n    }\n\n    Object.values(blockMap).forEach((block) => {\n        const blocks = getSurroundingBlocks(block);\n        block.label = sumBy(blocks, 'mine')\n    })\n}\n\nconst resetMap = () => {\n    for (let i = 0; i < 1000; i++) {\n        const block = createBlock(i)\n        blockMap[block.id] = block;\n    }\n}\n\nresetMap();\n\nconst handleValidFillMap = (block: Block) => {\n    fillMap();\n    let c = 0\n    while (c++ < 100) {\n        fillMap();\n        if (!block.mine && block.label === 0) {\n            return\n        }\n    }\n}\n\nconst handleFail = () => {\n    Object.values(blockMap).forEach(block => {\n            block.reveal = true;\n    })\n}\n\nconst handleMark = (block: Block) => {\n    block.mark = true;\n}\n\nconst handleReveal = (block: Block) => {\n    if (block.reveal) {\n        return;\n    }\n    block.reveal = true;\n    if (block.mine) {\n        console.error('失败')\n        handleFail()\n        return;\n    }\n    const {label} = block\n    if (label === 0) {\n        // 这是一个深搜\n        getSurroundingBlocks(block).forEach(handleReveal)\n    }\n}\n\nconst handleSmart = (block: Block) => {\n    const blocks = getSurroundingBlocks(block);\n    if (sumBy(blocks, (block) => block.reveal ? 0 : 1) === block.label) {\n        blocks.filter(b => !b.reveal).forEach(handleMark);\n        return;\n    }\n    if (sumBy(blocks, (block) => block.mark ? 1 : 0) === block.label) {\n        blocks.filter(b => !b.mark).forEach(handleReveal)\n    }\n}\n\nexport const handleBlockClick = (block: Block) => {\n    if (!start){\n        handleValidFillMap(block);\n        start = true\n    }\n    const {reveal} = block\n    if (reveal) {\n        handleSmart(block);\n    } else {\n        handleReveal(block);\n    }\n    rerender()\n}\n","import React, {CSSProperties, useCallback} from 'react';\nimport cx from 'classnames';\nimport {Block as BlockType} from './types';\nimport styles from './Block.module.css';\nimport theme from './Theme2.module.css';\nimport {handleBlockClick} from \"./region\";\n\ninterface Props {\n    block: BlockType\n    style: CSSProperties\n}\n\nconst Block = ({block, style}: Props) => {\n    const {mine, reveal, mark, label} = block;\n    const handleClick = useCallback(\n        () => handleBlockClick(block),\n        [block]\n    )\n    if (!reveal) {\n        const className = cx(\n            styles.block,\n            theme.cover,\n            {\n                [theme.mark]: mark,\n            }\n        )\n        return (\n            <div\n                className={className}\n                style={style}\n                onClick={handleClick}\n            >\n                {mark && 'm'}\n            </div>\n        )\n    }\n    const className = cx(\n        styles.block,\n        theme.reveal,\n        {\n            [theme[`label${label}`]]: !mine,\n            [theme.mine]: mine,\n        }\n    )\n    return (\n        <div\n            className={className}\n            style={style}\n            onClick={handleClick}\n        >\n            {mine ? '!' :  label}\n        </div>\n    )\n}\n\nexport default Block;\n","import React, {useReducer, useEffect, CSSProperties} from 'react';\nimport {createSelector} from 'reselect';\nimport useWindowWidth from './useWindowWidth';\nimport {blockMap} from './region';\nimport {subscribe} from './renderer';\nimport Block from './Block';\nimport {Block as BlockType} from './types';\nimport styles from './App.module.css';\n\nconst containerStyleSelector = createSelector<number, number, CSSProperties>(\n    (windowWidth) => windowWidth < 400 ? windowWidth : 400,\n    (width) => ({width})\n)\n\nconst sizeStyleSelector = createSelector<number, number, CSSProperties>(\n    size => size,\n    (size) => ({width: size, height: size})\n)\n\nconst increase = (v: number) => v + 1;\n\nconst App = () => {\n  const rerender = useReducer(increase, 0)[1];\n  const windowWidth = useWindowWidth();\n  const containerStyle = containerStyleSelector(windowWidth)\n  const blockStyle = sizeStyleSelector((containerStyle.width as number) / 10);\n  useEffect(\n      () => subscribe(rerender as any),\n      [rerender]\n  )\n  return (\n      <div className={styles.container} style={containerStyle}>\n        {Object.values(blockMap).map((block: BlockType) => (\n            <Block key={block.id} block={block} style={blockStyle} />\n        ))}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}